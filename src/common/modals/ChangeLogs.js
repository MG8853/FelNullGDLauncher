/* eslint-disable react/no-unescaped-entities */
import React, { memo, useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import styled from 'styled-components';
import { ipcRenderer } from 'electron';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faBug, faStar, faWrench } from '@fortawesome/free-solid-svg-icons';
import { useInView } from 'react-intersection-observer';
import { faDiscord, faGithub } from '@fortawesome/free-brands-svg-icons';
import Modal from '../components/Modal';
import SocialButtons from '../components/SocialButtons';
// import KoFiButton from '../assets/ko-fi.png';
// import PatreonButton from '../assets/patreon.png';
import UpdateIllustration from '../assets/update_illustration.png';
import { openModal } from '../reducers/modals/actions';
import ga from '../utils/analytics';

const UpdateRow = ({ header, content }) => {
  return (
    <li>
      &bull; {header}{' '}
      <span
        css={`
          color: ${props => props.theme.palette.text.third};
        `}
      >
        {content}
      </span>
    </li>
  );
};

const data = {
  new: [
    {
      header: 'Java16„Å´ÂØæÂøú„Åó„Åæ„Åó„ÅüÔºÅ',
      content:
        '„Åì„Çå„Å´„Çà„ÇäMC1.17‰ª•‰∏ä„Åß„ÇÇÂïèÈ°å„Å™„ÅèÂÆüË°å„Åß„Åç„Åæ„ÅôÔºÅË®≠ÂÆö„Åã„Çâ‰∏°Êñπ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÊâãÂãïË®≠ÂÆö„Åô„Çã„Åì„Å®„ÇÇ„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åó„ÅüÔºÅ'
    },
    {
      header: '„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÁ∞°Âçò„Å´Ë§áË£Ω„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åó„ÅüÔºÅ',
      content: '„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂè≥„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„ÄåË§áË£Ω„Åô„Çã„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å†„ÅëÔºÅ'
    },
    {
      header:
        'Microsoft„É≠„Ç∞„Ç§„É≥„Å´Èñ¢„Åô„Çã „Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº„ÄÅToS„ÄÅÂà©Áî®Ë¶èÂÆö „ÇíËøΩÂä†„Åó„Åæ„Åó„Åü„ÄÇ',
      content:
        'Ê≥ïÁöÑ„Å™„Åì„Å®„Å´ËààÂë≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅË®≠ÂÆö„Éö„Éº„Ç∏„Åã„ÇâË™≠„ÇÄ„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ'
    }
  ],
  improvements: [
    {
      header: 'ChangeLog„ÇíË¶ã„ÇÑ„Åô„Åè„Åó„Åæ„Åó„ÅüÔºÅ',
      content: '„Åì„ÅÆÁîªÈù¢„Åß„Åô üòÉ„ÄÇ'
    },
    {
      header: '„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅåÂ§ßÂπÖ„Å´Âêë‰∏ä„Åó„Åæ„Åó„ÅüÔºÅ',
      content: ''
    },
    {
      header: '‰æùÂ≠òÈñ¢‰øÇ„ÅÆÊõ¥Êñ∞„ÇíË°å„ÅÑ„Åæ„Åó„Åü„ÄÇ',
      content: '„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅÆÂêë‰∏ä„ÅÆ„Åü„ÇÅ„Å´Êõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ'
    }
  ],
  bugfixes: [
    {
      header: '„Ç¢„Ç´„Ç¶„É≥„Éà„ÅåÈùûË°®Á§∫„Å´„Å™„ÇãÂïèÈ°å„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü„ÄÇ',
      content: 'ËøΩÂä†„Åï„Çå„ÅüÊï∞„ÅåÂ§ö„Åô„Åé„Çã„Å®Ë¶ã„Åà„Å™„Åè„Å™„ÇãÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ'
    },
    {
      header: 'ÂêåÊôÇ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâË®≠ÂÆö„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü„ÄÇ',
      content: 'FTBmodpack„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊôÇ„Å´„ÅØ‰ΩøÁî®„Åï„Çå„Åæ„Åõ„Çì„ÄÇ'
    },
    {
      header: 'Fabric mod„Åå„É≠„Éº„Éâ„Åï„Çå„Å™„ÅÑÂïèÈ°å„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü',
      content: 'CurseForge„ÅåÊßãÈÄ†„ÇíÂ§âÊõ¥„Åó„Åü„Åü„ÇÅÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ'
    },
    {
      header: 'CurseForgeModLoader„ÇíÊ≠£„Åó„ÅèÊ§úÂá∫„Åó„Å™„Åã„Å£„Åü„Éê„Ç∞„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü„ÄÇ',
      content: ''
    },
    {
      header: 'Â§ñÈÉ®„Åã„Çâ„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü„ÄÇ',
      content:
        '„É≠„Éº„Ç´„É´zip„Å®„É™„É¢„Éº„ÉàURL„ÅÆ‰∏°Êñπ„ÅåÊ≠£„Åó„ÅèÊ©üËÉΩ„Åô„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åó„Åü„ÄÇ'
    }
  ]
};

const ChangeLogs = () => {
  const [version, setVersion] = useState(null);
  const [skipIObserver, setSkipIObserver] = useState(true);
  const dispatch = useDispatch();
  const { ref: intersectionObserverRef, inView: insectionObserverInView } =
    useInView({
      threshold: 0.3,
      initialInView: false,
      triggerOnce: true,
      skip: skipIObserver
    });

  useEffect(() => {
    ipcRenderer.invoke('getAppVersion').then(setVersion).catch(console.error);
    setTimeout(() => {
      setSkipIObserver(false);
    }, 300);
    ga.sendCustomEvent('changelogModalOpen');
  }, []);

  useEffect(() => {
    if (insectionObserverInView) {
      ga.sendCustomEvent('changelogModalReadAll');
    }
  }, [insectionObserverInView]);

  const openBisectModal = () => {
    dispatch(openModal('BisectHosting'));
    ga.sendCustomEvent('changelogModalOpenBisect');
  };

  return (
    <Modal
      css={`
        height: 550px;
        width: 650px;
      `}
      title={`What's new in ${version}`}
      removePadding
    >
      <Container>
        <Header>
          <img
            css={`
              border-radius: 5px;
            `}
            src={UpdateIllustration}
            alt="New Version"
          />
          <div
            css={`
              margin-top: 20px;
              color: ${props => props.theme.palette.text.third};
              span {
                color: ${props => props.theme.palette.text.primary};
                cursor: pointer;
                text-decoration: underline;
              }
            `}
          >
            FelNull„ÅåÂá∫„Åó„Å¶„Çã{' '}
            <span
              css={`
                color: ${props => props.theme.palette.colors.green};
              `}
            >
              ModPack„ÇÑLauncher
            </span>{' '}
            „Å™„Å©„ÅÆË≥™Âïè„ÅØ{' '}
            <span
              css={`
                color: ${props => props.theme.palette.colors.green};
              `}
            >
              Discord
            </span>{' '}
            „ÅßÂèó„Åë‰ªò„Åë„Å¶„Åä„Çä„Åæ„Åô„ÄÇ„Äå
            <span onClick={openBisectModal}>FelNullGDLauncher</span>„Äç
          </div>
          <div
            css={`
              display: flex;
              align-items: center;
              justify-content: start;
              margin-bottom: 20px;
              margin-top: 30px;
              a:nth-child(1) {
                margin-right: 20px;
              }
              img {
                border-radius: 30px;
                height: 40px;
                cursor: pointer;
                transition: transform 0.2s ease-in-out;
                &:hover {
                  transform: scale(1.05);
                }
              }
            `}
          >
            <a href="https://discord.gg/X9BUF9A">
              <div>
                <FontAwesomeIcon icon={faDiscord} size="lg" />
              </div>
            </a>
            <a href="https://github.com/TeamFelnull/FelNullGDLauncher">
              <div>
                <FontAwesomeIcon icon={faGithub} size="lg" />
              </div>
            </a>
          </div>
        </Header>
        <Section>
          <SectionTitle
            css={`
              color: ${props => props.theme.palette.colors.green};
            `}
          >
            <span
              css={`
                display: flex;
                align-items: center;
                padding-top: 90px;
              `}
            >
              <FontAwesomeIcon
                icon={faStar}
                css={`
                  margin-right: 10px;
                  font-size: 20px;
                `}
              />
              Êñ∞Ê©üËÉΩ
            </span>
          </SectionTitle>
          <div>
            <ul>
              {data.new.map(item => (
                <UpdateRow
                  key={item.header}
                  header={item.header}
                  content={item.content}
                />
              ))}
            </ul>
          </div>
        </Section>
        <Section>
          <SectionTitle
            css={`
              color: ${props => props.theme.palette.colors.yellow};
            `}
          >
            <span
              css={`
                display: flex;
                align-items: center;
              `}
            >
              <FontAwesomeIcon
                icon={faWrench}
                css={`
                  margin-right: 10px;
                  font-size: 20px;
                `}
              />
              ÊîπÂñÑ
            </span>
          </SectionTitle>
          <div>
            <ul>
              {data.improvements.map(item => (
                <UpdateRow
                  key={item.header}
                  header={item.header}
                  content={item.content}
                />
              ))}
            </ul>
          </div>
        </Section>
        <Section>
          <SectionTitle
            css={`
              color: ${props => props.theme.palette.colors.red};
            `}
          >
            <span
              css={`
                display: flex;
                align-items: center;
              `}
            >
              <FontAwesomeIcon
                icon={faBug}
                css={`
                  margin-right: 10px;
                  font-size: 20px;
                `}
              />
              ‰øÆÊ≠£
            </span>
          </SectionTitle>
          <div>
            <ul ref={intersectionObserverRef}>
              {data.bugfixes.map(item => (
                <UpdateRow
                  key={item.header}
                  header={item.header}
                  content={item.content}
                />
              ))}
            </ul>
          </div>
        </Section>
      </Container>
      <div
        css={`
          position: sticky;
          bottom: 0;
          height: 60px;
          width: 100%;
          background: ${props => props.theme.palette.grey[800]};
          border-radius: 4px;
          display: flex;
          align-items: center;
          padding: 0 20px;
        `}
      >
        <SocialButtons />
      </div>
    </Modal>
  );
};

export default memo(ChangeLogs);

const Container = styled.div`
  width: 100%;
  height: calc(100% - 60px);
  overflow-y: auto;
  color: ${props => props.theme.palette.text.primary};
  padding: 20px;
`;

const SectionTitle = styled.h2`
  width: 100%;
  margin: 0;
  text-transform: uppercase;
  font-weight: bold;
  font-size: 22px;
`;

const Section = styled.div`
  width: 100%;
  font-size: 16px;
  p {
    margin: 20px 0 !important;
  }
  div {
    width: 100%;
    margin: 20px 0;
    border-radius: 5px;
    ul {
      padding: 0px;
      list-style-position: inside;
    }
    li {
      text-align: start;
      list-style-type: none;
      margin: 10px 0;
    }
  }
`;

const Header = styled.div`
  height: 150px;
  margin-bottom: 200px;
`;
